# an lts test
DFA test_lts {
   STATE ( initial: hungry, thirsty )
   STATE ( hungry: hungry )
   STATE ( thirsty: thirsty )
   STATE ( toast_a: hungry, thirsty, toast )
   STATE ( tea_a: hungry, thirsty, tea )
   STATE ( toast_tea_a: hungry, thirsty, toast, tea )
   STATE ( tea_b: thirsty, tea )
   STATE ( toast_b: hungry, toast )
   STATE ( fulfilled: temp )

   ACTION ( make_toast: initial -> toast_a )
   ACTION ( make_toast: tea_a -> toast_tea_a )
   ACTION ( make_toast: hungry -> toast_b )
   ACTION ( make_tea: initial -> tea_a )
   ACTION ( make_tea: toast_a -> toast_tea_a )
   ACTION ( make_tea: thirsty -> tea_b )

   ACTION ( eat_toast: toast_a -> thirsty )
   ACTION ( eat_toast: toast_tea_a -> tea_b )
   ACTION ( eat_toast: toast_b -> fulfilled )

   ACTION ( drink_tea: tea_a -> hungry )
   ACTION ( drink_tea: toast_tea_a -> toast_b )
   ACTION ( drink_tea: tea_b -> fulfilled )
}

DFA test_dfa { # DFA test
   STATE ( empty: hungry )
   STATE ( fulfilled: foo )
   ACTION ( make_toast: empty -> toast_ready )
   ACTION ( eat_toast: toast_ready -> fulfilled )
}

# another DFA test
DFA test_dfa2 {
   STATE ( empty: hungry ) # Hungry state
}

# some regex
REGULAR all {
   .*
}

REGULAR eat_nonexistent_toast {
   .* eat_toast .* make_toast
}

# some formulas

FORMULA not_always_hungry {
   !E( 0 R[test_dfa] hungry )
}
#
FORMULA dont_eat_future_toast {
   !E( 1 U[test_dfa] 1 )
}
#
#FORMULA no_wasteful_toas
