# A pushdown system test
PDS test_pds {
   STATE ( unfulfilled[_]     : hungry )
   STATE ( unfulfilled[toast] : hungry )
   STATE ( eaten_toast[_]     : full, eaten_all_toast )
   STATE ( eaten_toast[toast] : full )

   # We can make toast when we're not full
   ACTION ( make_toast: unfulfilled[_]     -> unfulfilled[ PUSH toast ] )
   ACTION ( make_toast: unfulfilled[toast] -> unfulfilled[ PUSH toast ] )

   # Simultaneously make and eat toast
   ACTION ( make_and_eat: unfulfilled[toast] -> eaten_toast[ REWRITE toast ] )
   ACTION ( make_and_eat: eaten_toast[toast] -> eaten_toast[ REWRITE toast ] )

   # We can eat toast when we've got some
   ACTION ( eat_toast: unfulfilled[toast]  -> eaten_toast[ POP ] )
   ACTION ( eat_toast: eaten_toast[toast]  -> eaten_toast[ POP ] )
}

#:xshow(test_pds)

#DFA test_dfa { # DFA test
#   STATE ( empty )
#   STATE ( fulfilled )
#   STATE ( toast_ready )
#   ACTION ( make_toast: empty -> toast_ready )
#   ACTION ( eat_toast: toast_ready -> fulfilled )
#}
#
## another DFA test
#DFA test_dfa2 {
#   STATE ( empty )
#}

# some regex
#REGULAR all {
#   .*
#}
#
#REGULAR eat_nonexistent_toast {
#   .* eat_toast .* make_toast
#}

# some formulas

#FORMULA not_always_hungry {
#   !E( 0 R[test_dfa] hungry )
#}
##
#FORMULA dont_eat_future_toast {
#   !E( 1 U[test_dfa] 1 )
#}
#
#FORMULA no_wasteful_toas
