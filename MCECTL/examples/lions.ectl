LTS river {
   STATE ( h0_l0: success )
   STATE ( h0_l1: carnage )
   STATE ( h0_l2: carnage )
   STATE ( h0_l3: carnage )
   STATE ( h1_l0: carnage )
   STATE ( h1_l1:  )
   STATE ( h1_l2: carnage )
   STATE ( h1_l3: carnage )
   STATE ( h2_l0: carnage )
   STATE ( h2_l1: carnage )
   STATE ( h2_l2:  )
   STATE ( h2_l3: carnage )
   STATE ( h3_l0: carnage )
   STATE ( h3_l1: carnage )
   STATE ( h3_l2: carnage )
   STATE ( h3_l3:  )
   ACTION ( h1_back: h0_l0 -> h1_l0 )
   ACTION ( h2_back: h0_l0 -> h2_l0 )
   ACTION ( h1l1_back: h0_l0 -> h1_l1 )
   ACTION ( l1_back: h0_l0 -> h0_l1 )
   ACTION ( l2_back: h0_l0 -> h0_l2 )
   ACTION ( l1_across: h0_l1 -> h0_l0 )
   ACTION ( h1_back: h0_l1 -> h1_l1 )
   ACTION ( h2_back: h0_l1 -> h2_l1 )
   ACTION ( h1l1_back: h0_l1 -> h1_l2 )
   ACTION ( l1_back: h0_l1 -> h0_l2 )
   ACTION ( l2_back: h0_l1 -> h0_l3 )
   ACTION ( l1_across: h0_l2 -> h0_l1 )
   ACTION ( l2_across: h0_l2 -> h0_l0 )
   ACTION ( h1_back: h0_l2 -> h1_l2 )
   ACTION ( h2_back: h0_l2 -> h2_l2 )
   ACTION ( h1l1_back: h0_l2 -> h1_l3 )
   ACTION ( l1_back: h0_l2 -> h0_l3 )
   ACTION ( l1_across: h0_l3 -> h0_l2 )
   ACTION ( l2_across: h0_l3 -> h0_l1 )
   ACTION ( h1_back: h0_l3 -> h1_l3 )
   ACTION ( h2_back: h0_l3 -> h2_l3 )
   ACTION ( h1_across: h1_l0 -> h0_l0 )
   ACTION ( h1_back: h1_l0 -> h2_l0 )
   ACTION ( h2_back: h1_l0 -> h3_l0 )
   ACTION ( h1l1_back: h1_l0 -> h2_l1 )
   ACTION ( l1_back: h1_l0 -> h1_l1 )
   ACTION ( l2_back: h1_l0 -> h1_l2 )
   ACTION ( h1_across: h1_l1 -> h0_l1 )
   ACTION ( h1l1_across: h1_l1 -> h0_l0 )
   ACTION ( l1_across: h1_l1 -> h1_l0 )
   ACTION ( h1_back: h1_l1 -> h2_l1 )
   ACTION ( h2_back: h1_l1 -> h3_l1 )
   ACTION ( h1l1_back: h1_l1 -> h2_l2 )
   ACTION ( l1_back: h1_l1 -> h1_l2 )
   ACTION ( l2_back: h1_l1 -> h1_l3 )
   ACTION ( h1_across: h1_l2 -> h0_l2 )
   ACTION ( h1l1_across: h1_l2 -> h0_l1 )
   ACTION ( l1_across: h1_l2 -> h1_l1 )
   ACTION ( l2_across: h1_l2 -> h1_l0 )
   ACTION ( h1_back: h1_l2 -> h2_l2 )
   ACTION ( h2_back: h1_l2 -> h3_l2 )
   ACTION ( h1l1_back: h1_l2 -> h2_l3 )
   ACTION ( l1_back: h1_l2 -> h1_l3 )
   ACTION ( h1_across: h1_l3 -> h0_l3 )
   ACTION ( h1l1_across: h1_l3 -> h0_l2 )
   ACTION ( l1_across: h1_l3 -> h1_l2 )
   ACTION ( l2_across: h1_l3 -> h1_l1 )
   ACTION ( h1_back: h1_l3 -> h2_l3 )
   ACTION ( h2_back: h1_l3 -> h3_l3 )
   ACTION ( h1_across: h2_l0 -> h1_l0 )
   ACTION ( h2_across: h2_l0 -> h0_l0 )
   ACTION ( h1_back: h2_l0 -> h3_l0 )
   ACTION ( h1l1_back: h2_l0 -> h3_l1 )
   ACTION ( l1_back: h2_l0 -> h2_l1 )
   ACTION ( l2_back: h2_l0 -> h2_l2 )
   ACTION ( h1_across: h2_l1 -> h1_l1 )
   ACTION ( h2_across: h2_l1 -> h0_l1 )
   ACTION ( h1l1_across: h2_l1 -> h1_l0 )
   ACTION ( l1_across: h2_l1 -> h2_l0 )
   ACTION ( h1_back: h2_l1 -> h3_l1 )
   ACTION ( h1l1_back: h2_l1 -> h3_l2 )
   ACTION ( l1_back: h2_l1 -> h2_l2 )
   ACTION ( l2_back: h2_l1 -> h2_l3 )
   ACTION ( h1_across: h2_l2 -> h1_l2 )
   ACTION ( h2_across: h2_l2 -> h0_l2 )
   ACTION ( h1l1_across: h2_l2 -> h1_l1 )
   ACTION ( l1_across: h2_l2 -> h2_l1 )
   ACTION ( l2_across: h2_l2 -> h2_l0 )
   ACTION ( h1_back: h2_l2 -> h3_l2 )
   ACTION ( h1l1_back: h2_l2 -> h3_l3 )
   ACTION ( l1_back: h2_l2 -> h2_l3 )
   ACTION ( h1_across: h2_l3 -> h1_l3 )
   ACTION ( h2_across: h2_l3 -> h0_l3 )
   ACTION ( h1l1_across: h2_l3 -> h1_l2 )
   ACTION ( l1_across: h2_l3 -> h2_l2 )
   ACTION ( l2_across: h2_l3 -> h2_l1 )
   ACTION ( h1_back: h2_l3 -> h3_l3 )
   ACTION ( h1_across: h3_l0 -> h2_l0 )
   ACTION ( h2_across: h3_l0 -> h1_l0 )
   ACTION ( l1_back: h3_l0 -> h3_l1 )
   ACTION ( l2_back: h3_l0 -> h3_l2 )
   ACTION ( h1_across: h3_l1 -> h2_l1 )
   ACTION ( h2_across: h3_l1 -> h1_l1 )
   ACTION ( h1l1_across: h3_l1 -> h2_l0 )
   ACTION ( l1_across: h3_l1 -> h3_l0 )
   ACTION ( l1_back: h3_l1 -> h3_l2 )
   ACTION ( l2_back: h3_l1 -> h3_l3 )
   ACTION ( h1_across: h3_l2 -> h2_l2 )
   ACTION ( h2_across: h3_l2 -> h1_l2 )
   ACTION ( h1l1_across: h3_l2 -> h2_l1 )
   ACTION ( l1_across: h3_l2 -> h3_l1 )
   ACTION ( l2_across: h3_l2 -> h3_l0 )
   ACTION ( l1_back: h3_l2 -> h3_l3 )
   ACTION ( h1_across: h3_l3 -> h2_l3 )
   ACTION ( h2_across: h3_l3 -> h1_l3 )
   ACTION ( h1l1_across: h3_l3 -> h2_l2 )
   ACTION ( l1_across: h3_l3 -> h3_l2 )
   ACTION ( l2_across: h3_l3 -> h3_l1 )
}
PDA boat {
   STATE ( here )
   STATE ( *there )
   ACTION ( h1_across: here[_] -> there[REWRITE _] )
   ACTION ( h1_back: there[_] -> here[REWRITE _] )
   ACTION ( h2_across: here[_] -> there[REWRITE _] )
   ACTION ( h2_back: there[_] -> here[REWRITE _] )
   ACTION ( h1l1_across: here[_] -> there[REWRITE _] )
   ACTION ( h1l1_back: there[_] -> here[REWRITE _] )
   ACTION ( l1_across: here[_] -> there[REWRITE _] )
   ACTION ( l1_back: there[_] -> here[REWRITE _] )
   ACTION ( l2_across: here[_] -> there[REWRITE _] )
   ACTION ( l2_back: there[_] -> here[REWRITE _] )
}
FORMULA solve {
   E( !carnage U[boat] success )
}
:check(solve,river)
