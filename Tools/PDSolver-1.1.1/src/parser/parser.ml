type token =
  | ARROW
  | ABELARD
  | ELOISE
  | RULES_START
  | STATE_PROPS_START
  | EMPTY_WORD
  | MU_PROP_START
  | PROP_VAL_START
  | BP_START
  | INTERESTING_CONFIGS
  | IDENTIFIER of (string)
  | TICKED_IDENTIFIER of (string)
  | INTEGER of (int)
  | BOX
  | DIAMOND
  | BACKBOX
  | BACKDIAMOND
  | LCONSTRAINBOX
  | LCONSTRAINDIAMOND
  | LNEGCONSTRAINBOX
  | LNEGCONSTRAINDIAMOND
  | LCONSTRAINBACKBOX
  | LCONSTRAINBACKDIAMOND
  | LNEGCONSTRAINBACKBOX
  | LNEGCONSTRAINBACKDIAMOND
  | NONDET
  | ASSIGN
  | EQ_OP
  | NE_OP
  | IMPLIES
  | DECL
  | ENFORCE
  | TERNARY
  | SEMI_COLON
  | APOS
  | COMMA
  | COLON
  | LPAREN
  | RPAREN
  | LSQUARE
  | RSQUARE
  | BANG
  | TILDE
  | CARET
  | OR
  | AND
  | LT
  | GT
  | IF
  | THEN
  | ELSE
  | ELSIF
  | FI
  | WHILE
  | DO
  | OD
  | RETURN
  | SKIP
  | GOTO
  | BEG
  | END
  | BOOL
  | VOID
  | ASSERT
  | ASSUME
  | PRINT
  | CHOOSE
  | CONSTRAIN
  | DEAD
  | ABORTIF
  | DFS
  | MU
  | NU
  | PUNCT
  | EOF
  | EOL
  | FIXEDPOINT

open Parsing;;
# 2 "parser.mly"
    open Lexing;;

    (* File from a skeleton provided by Gerard Basler *)
    let parse_error msg = 
        print_string ("Parse error: " ^ msg ^ "\n");
        let lex_pos = Parsing.symbol_start_pos () in
        print_string ("At line: " ^ (string_of_int lex_pos.pos_lnum));
        print_newline ();;



    let id_starts_lowercase s = 
        if ((String.length s) = 0) then (
           parse_error "Empty identifier encountered in mu mu_formula.";
           failwith "";
        ) else 
           ((Char.lowercase s.[0]) = s.[0]);;


    let make_pds_mucalc pds int_confs fmla props = 
        let do_config chars (p, w) =
            Words.CharacterSet.union chars (Words.word_get_characters w) in
        let int_alpha = List.fold_left do_config Words.CharacterSet.empty int_confs in
        pds#expand_alphabet int_alpha;
        new Pds_mucalc.pds_mucalc pds int_confs fmla props;;

    let make_parity_game pds props int_confs = 
        let do_config chars (p, w) =
            Words.CharacterSet.union chars (Words.word_get_characters w) in
        let int_alpha = List.fold_left do_config Words.CharacterSet.empty int_confs in
        pds#expand_alphabet int_alpha;
        new Parity_game.parity_game pds props int_confs;;
# 115 "parser.ml"
let yytransl_const = [|
  257 (* ARROW *);
  258 (* ABELARD *);
  259 (* ELOISE *);
  260 (* RULES_START *);
  261 (* STATE_PROPS_START *);
  262 (* EMPTY_WORD *);
  263 (* MU_PROP_START *);
  264 (* PROP_VAL_START *);
  265 (* BP_START *);
  266 (* INTERESTING_CONFIGS *);
  270 (* BOX *);
  271 (* DIAMOND *);
  272 (* BACKBOX *);
  273 (* BACKDIAMOND *);
  274 (* LCONSTRAINBOX *);
  275 (* LCONSTRAINDIAMOND *);
  276 (* LNEGCONSTRAINBOX *);
  277 (* LNEGCONSTRAINDIAMOND *);
  278 (* LCONSTRAINBACKBOX *);
  279 (* LCONSTRAINBACKDIAMOND *);
  280 (* LNEGCONSTRAINBACKBOX *);
  281 (* LNEGCONSTRAINBACKDIAMOND *);
  282 (* NONDET *);
  283 (* ASSIGN *);
  284 (* EQ_OP *);
  285 (* NE_OP *);
  286 (* IMPLIES *);
  287 (* DECL *);
  288 (* ENFORCE *);
  289 (* TERNARY *);
  290 (* SEMI_COLON *);
  291 (* APOS *);
  292 (* COMMA *);
  293 (* COLON *);
  294 (* LPAREN *);
  295 (* RPAREN *);
  296 (* LSQUARE *);
  297 (* RSQUARE *);
  298 (* BANG *);
  299 (* TILDE *);
  300 (* CARET *);
  301 (* OR *);
  302 (* AND *);
  303 (* LT *);
  304 (* GT *);
  305 (* IF *);
  306 (* THEN *);
  307 (* ELSE *);
  308 (* ELSIF *);
  309 (* FI *);
  310 (* WHILE *);
  311 (* DO *);
  312 (* OD *);
  313 (* RETURN *);
  314 (* SKIP *);
  315 (* GOTO *);
  316 (* BEG *);
  317 (* END *);
  318 (* BOOL *);
  319 (* VOID *);
  320 (* ASSERT *);
  321 (* ASSUME *);
  322 (* PRINT *);
  323 (* CHOOSE *);
  324 (* CONSTRAIN *);
  325 (* DEAD *);
  326 (* ABORTIF *);
  327 (* DFS *);
  328 (* MU *);
  329 (* NU *);
  330 (* PUNCT *);
    0 (* EOF *);
  331 (* EOL *);
  332 (* FIXEDPOINT *);
    0|]

let yytransl_block = [|
  267 (* IDENTIFIER *);
  268 (* TICKED_IDENTIFIER *);
  269 (* INTEGER *);
    0|]

let yylhs = "\255\255\
\001\000\006\000\006\000\006\000\007\000\010\000\010\000\011\000\
\012\000\012\000\012\000\008\000\013\000\013\000\014\000\014\000\
\009\000\015\000\015\000\016\000\002\000\017\000\018\000\018\000\
\020\000\020\000\021\000\022\000\022\000\023\000\023\000\024\000\
\019\000\019\000\025\000\026\000\031\000\031\000\031\000\032\000\
\032\000\028\000\028\000\029\000\029\000\027\000\034\000\034\000\
\030\000\030\000\030\000\035\000\035\000\036\000\036\000\038\000\
\038\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\039\000\040\000\040\000\050\000\050\000\049\000\
\049\000\048\000\048\000\052\000\041\000\042\000\043\000\044\000\
\044\000\045\000\054\000\054\000\054\000\046\000\047\000\047\000\
\047\000\047\000\055\000\055\000\055\000\055\000\055\000\055\000\
\056\000\056\000\057\000\057\000\058\000\058\000\058\000\059\000\
\059\000\060\000\060\000\061\000\061\000\061\000\033\000\033\000\
\051\000\053\000\053\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\063\000\064\000\
\065\000\065\000\066\000\062\000\062\000\005\000\005\000\067\000\
\000\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\003\000\003\000\004\000\002\000\002\000\001\000\006\000\
\002\000\001\000\001\000\002\000\002\000\001\000\004\000\004\000\
\002\000\002\000\001\000\003\000\001\000\002\000\004\000\000\000\
\001\000\003\000\001\000\004\000\000\000\001\000\003\000\001\000\
\001\000\002\000\008\000\002\000\002\000\005\000\002\000\001\000\
\000\000\003\000\000\000\003\000\000\000\003\000\001\000\000\000\
\001\000\002\000\002\000\002\000\001\000\003\000\002\000\003\000\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\002\000\002\000\004\000\003\000\000\000\002\000\001\000\
\003\000\001\000\003\000\001\000\002\000\002\000\004\000\004\000\
\003\000\005\000\001\000\003\000\005\000\005\000\001\000\002\000\
\001\000\002\000\003\000\001\000\006\000\001\000\002\000\001\000\
\001\000\002\000\001\000\001\000\001\000\003\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\003\000\001\000\005\000\
\001\000\001\000\003\000\001\000\002\000\003\000\002\000\002\000\
\002\000\002\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\003\000\003\000\003\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\005\000\002\000\002\000\
\002\000\001\000\004\000\002\000\001\000\003\000\003\000\002\000\
\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\153\000\001\000\000\000\000\000\000\000\154\000\021\000\000\000\
\116\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\156\000\000\000\000\000\000\000\
\000\000\157\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\014\000\000\000\000\000\027\000\000\000\025\000\040\000\
\022\000\000\000\000\000\000\000\000\000\119\000\120\000\121\000\
\122\000\149\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\117\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\146\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\152\000\000\000\000\000\
\000\000\006\000\000\000\000\000\013\000\002\000\000\000\003\000\
\000\000\000\000\034\000\000\000\000\000\036\000\000\000\039\000\
\148\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\118\000\000\000\000\000\000\000\000\000\131\000\000\000\
\145\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\150\000\151\000\000\000\000\000\000\000\
\004\000\023\000\026\000\032\000\000\000\030\000\000\000\000\000\
\000\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\000\000\000\000\000\000\011\000\010\000\000\000\018\000\
\000\000\136\000\137\000\138\000\139\000\140\000\141\000\000\000\
\015\000\016\000\000\000\046\000\000\000\000\000\000\000\147\000\
\009\000\020\000\142\000\000\000\031\000\000\000\000\000\000\000\
\038\000\008\000\000\000\094\000\096\000\092\000\000\000\000\000\
\100\000\099\000\000\000\000\000\097\000\101\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\095\000\000\000\
\000\000\000\000\042\000\098\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\065\000\000\000\000\000\074\000\091\000\000\000\000\000\102\000\
\103\000\000\000\000\000\000\000\000\000\044\000\055\000\000\000\
\000\000\000\000\000\000\114\000\000\000\057\000\000\000\000\000\
\000\000\000\000\076\000\000\000\051\000\035\000\050\000\000\000\
\052\000\058\000\059\000\060\000\061\000\062\000\063\000\066\000\
\000\000\000\000\000\000\000\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\000\000\069\000\000\000\072\000\
\075\000\000\000\000\000\080\000\000\000\000\000\115\000\056\000\
\079\000\000\000\000\000\068\000\093\000\000\000\000\000\083\000\
\082\000\086\000\073\000\000\000\000\000\000\000\084\000\000\000\
\000\000\085\000"

let yydgoto = "\006\000\
\009\000\014\000\034\000\037\000\042\000\010\000\011\000\012\000\
\087\000\046\000\047\000\167\000\049\000\050\000\131\000\132\000\
\015\000\016\000\057\000\054\000\055\000\182\000\149\000\150\000\
\058\000\059\000\109\000\192\000\213\000\238\000\060\000\061\000\
\009\001\151\000\239\000\240\000\241\000\015\001\242\000\243\000\
\244\000\245\000\246\000\247\000\248\000\249\000\250\000\251\000\
\047\001\060\001\012\001\252\000\013\001\065\001\205\000\206\000\
\207\000\208\000\209\000\210\000\211\000\067\000\039\000\040\000\
\084\000\085\000\044\000"

let yysindex = "\054\001\
\118\255\000\255\129\255\162\255\218\255\000\000\073\255\151\255\
\000\000\000\000\163\255\170\255\171\255\000\000\000\000\116\255\
\000\000\129\255\129\255\129\255\129\255\187\255\187\255\187\255\
\187\255\187\255\187\255\187\255\187\255\129\255\129\255\193\255\
\205\255\075\255\129\255\224\255\000\000\207\255\107\255\095\255\
\000\255\000\000\229\255\236\255\238\255\073\255\000\000\125\255\
\151\255\000\000\006\000\251\000\000\000\192\255\000\000\000\000\
\000\000\116\255\249\255\252\255\079\255\000\000\000\000\000\000\
\000\000\000\000\252\254\249\254\006\255\001\255\017\255\011\255\
\019\255\013\255\068\255\000\000\221\255\231\255\129\255\129\255\
\129\255\075\255\031\000\224\255\000\000\034\000\236\255\045\000\
\236\255\045\000\170\255\236\255\170\255\000\000\036\001\062\001\
\070\000\000\000\066\000\068\000\000\000\000\000\088\001\000\000\
\000\255\171\255\000\000\085\000\041\000\000\000\053\000\000\000\
\000\000\129\255\129\255\129\255\129\255\129\255\129\255\129\255\
\129\255\000\000\129\255\129\255\176\255\061\000\000\000\187\255\
\000\000\061\255\034\000\000\000\045\000\110\001\114\001\122\001\
\127\001\128\001\129\001\000\000\000\000\123\000\106\000\107\000\
\000\000\000\000\000\000\000\000\102\000\000\000\105\000\114\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\075\255\075\255\008\255\000\000\000\000\058\255\000\000\
\154\001\000\000\000\000\000\000\000\000\000\000\000\000\061\255\
\000\000\000\000\085\000\000\000\085\000\125\000\113\000\000\000\
\000\000\000\000\000\000\072\255\000\000\214\255\124\000\093\000\
\000\000\000\000\114\000\000\000\000\000\000\000\154\000\124\000\
\000\000\000\000\128\000\197\255\000\000\000\000\035\000\227\255\
\126\000\131\000\044\255\124\000\188\255\000\000\000\000\086\255\
\124\000\124\000\000\000\000\000\124\000\124\000\124\000\124\000\
\124\000\124\000\225\255\223\255\124\000\124\000\124\000\000\000\
\159\000\124\000\124\000\146\000\175\000\175\255\000\000\054\000\
\000\000\155\000\156\000\158\000\162\000\163\000\164\000\000\000\
\000\000\165\000\002\255\000\000\000\000\127\255\156\255\000\000\
\000\000\227\255\126\000\131\000\131\000\000\000\000\000\104\000\
\168\000\152\000\007\255\000\000\172\000\000\000\174\000\168\000\
\168\000\124\000\000\000\176\000\000\000\000\000\000\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\138\000\175\000\124\000\124\000\000\000\140\255\188\255\188\255\
\124\000\177\000\158\255\000\000\180\000\000\000\236\254\000\000\
\000\000\032\255\044\255\000\000\154\255\026\000\000\000\000\000\
\000\000\124\000\124\000\000\000\000\000\188\255\124\000\000\000\
\000\000\000\000\000\000\168\000\040\000\169\000\000\000\188\255\
\154\255\000\000"

let yyrindex = "\000\000\
\000\000\110\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\213\001\000\000\000\000\000\000\000\000\000\000\000\000\
\110\255\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\110\255\000\000\000\000\182\000\000\000\000\000\211\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\002\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\184\000\000\000\000\000\126\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\000\000\000\000\126\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\170\000\
\222\000\016\001\119\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\090\255\000\000\000\000\190\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\196\000\248\000\040\001\064\001\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\193\000\000\000\194\000\197\000\
\200\000\000\000\000\000\202\000\000\000\000\000\000\000\090\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\149\000\000\000\205\000\000\000\
\000\000\000\000\079\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\209\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\203\001\015\000\000\000\000\000\000\000\064\000\234\001\
\196\001\000\000\202\001\073\001\000\000\201\001\000\000\123\001\
\000\000\148\001\199\001\000\000\156\001\065\001\084\001\089\001\
\000\000\000\000\000\000\000\000\000\000\138\255\000\000\000\000\
\065\255\000\000\028\255\000\000\029\001\000\000\000\000\000\000\
\000\000\000\000\000\000\237\000\000\000\000\000\000\000\034\001\
\000\000\000\000\030\255\239\000\100\255\201\000\068\001\103\000\
\000\000\053\001\055\001\117\000\244\000\028\000\072\000\232\255\
\000\000\204\001\240\001"

let yytablesize = 659
let yytable = "\204\000\
\033\000\132\000\010\001\113\000\133\000\102\000\113\000\012\000\
\216\000\023\001\134\000\113\000\135\000\089\000\091\000\058\001\
\113\000\005\000\113\000\144\000\227\000\113\000\017\000\113\000\
\143\000\254\000\255\000\113\000\033\001\113\000\013\000\043\000\
\062\000\063\000\064\000\065\000\114\000\034\001\011\001\218\000\
\115\000\184\000\016\001\017\001\075\000\076\000\116\000\059\001\
\117\000\082\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\118\000\119\000\120\000\121\000\040\001\048\001\134\000\
\218\000\136\000\165\000\038\000\185\000\043\000\055\001\166\000\
\061\001\225\000\043\000\052\000\043\000\043\000\043\000\043\000\
\023\001\023\001\185\000\045\000\043\000\043\000\043\000\067\001\
\226\000\043\000\043\000\186\000\070\001\125\000\126\000\127\000\
\023\001\079\000\007\000\050\001\023\001\035\000\090\000\092\000\
\079\000\194\000\122\000\038\001\169\000\088\000\007\000\093\000\
\080\000\081\000\036\000\096\000\076\000\043\001\218\000\080\000\
\081\000\007\000\008\000\068\001\253\000\076\000\099\000\100\000\
\154\000\155\000\156\000\157\000\158\000\159\000\160\000\161\000\
\029\000\162\000\163\000\017\000\111\000\112\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\137\000\164\000\139\000\029\000\133\000\218\000\
\135\000\048\000\035\001\138\000\228\000\007\000\030\000\008\000\
\035\000\036\000\031\000\024\000\024\000\007\000\029\000\041\001\
\053\001\054\001\052\001\029\000\024\000\053\000\029\000\029\000\
\029\000\228\000\056\000\021\001\218\000\029\000\029\000\029\000\
\036\001\041\001\029\000\029\000\057\001\066\000\228\000\069\001\
\032\000\033\000\229\000\077\000\062\001\063\001\064\001\230\000\
\021\001\073\001\231\000\232\000\233\000\035\000\036\000\078\000\
\086\000\234\000\235\000\236\000\080\000\081\000\237\000\229\000\
\035\000\105\000\041\000\106\000\230\000\218\000\219\000\231\000\
\232\000\233\000\083\000\022\001\229\000\041\000\234\000\235\000\
\236\000\230\000\035\000\237\000\231\000\232\000\233\000\195\000\
\097\000\179\000\104\000\234\000\235\000\236\000\221\000\222\000\
\237\000\218\000\006\001\007\001\008\001\132\000\110\000\033\000\
\133\000\132\000\132\000\012\000\133\000\133\000\134\000\086\000\
\135\000\012\000\134\000\134\000\135\000\135\000\005\000\144\000\
\005\000\005\000\144\000\005\000\143\000\017\000\108\000\132\000\
\143\000\143\000\133\000\140\000\228\000\113\000\123\000\113\000\
\132\000\128\000\113\000\133\000\130\000\196\000\132\000\197\000\
\124\000\134\000\228\000\135\000\036\000\113\000\001\000\002\000\
\003\000\004\000\005\000\021\001\198\000\141\000\041\000\041\000\
\024\001\044\001\008\001\000\001\001\001\199\000\142\000\113\000\
\200\000\021\001\229\000\041\000\041\000\045\000\143\000\230\000\
\144\000\066\001\231\000\232\000\233\000\004\001\005\001\145\000\
\229\000\234\000\235\000\236\000\071\001\230\000\237\000\148\000\
\231\000\232\000\233\000\153\000\152\000\203\000\229\000\234\000\
\235\000\236\000\081\000\230\000\237\000\170\000\231\000\232\000\
\233\000\171\000\196\000\045\000\197\000\234\000\235\000\236\000\
\045\000\172\000\237\000\045\000\045\000\045\000\173\000\174\000\
\175\000\198\000\045\000\045\000\045\000\176\000\196\000\045\000\
\197\000\179\000\199\000\177\000\178\000\200\000\037\001\180\000\
\181\000\201\000\202\000\183\000\045\001\198\000\197\000\111\000\
\111\000\187\000\111\000\111\000\191\000\111\000\199\000\111\000\
\193\000\200\000\212\000\198\000\215\000\201\000\202\000\217\000\
\111\000\014\001\203\000\223\000\199\000\111\000\224\000\200\000\
\094\000\094\000\094\000\201\000\202\000\094\000\094\000\018\001\
\094\000\019\001\111\000\056\001\026\001\027\001\203\000\028\001\
\094\000\094\000\094\000\029\001\030\001\031\001\032\001\104\000\
\218\000\039\001\104\000\104\000\203\000\104\000\104\000\041\001\
\104\000\042\001\104\000\034\001\155\000\104\000\104\000\104\000\
\094\000\008\001\072\001\104\000\048\000\037\000\047\000\087\000\
\104\000\105\000\088\000\090\000\105\000\105\000\077\000\105\000\
\105\000\078\000\105\000\067\000\105\000\104\000\070\000\105\000\
\105\000\105\000\071\000\094\000\051\000\105\000\103\000\098\000\
\188\000\101\000\105\000\106\000\146\000\168\000\106\000\106\000\
\107\000\106\000\106\000\214\000\106\000\147\000\106\000\105\000\
\190\000\106\000\106\000\189\000\025\001\046\001\020\001\106\000\
\049\001\074\001\220\000\002\001\106\000\107\000\003\001\051\001\
\107\000\107\000\095\000\107\000\107\000\000\000\107\000\129\000\
\107\000\106\000\000\000\107\000\107\000\000\000\000\000\000\000\
\000\000\107\000\000\000\000\000\000\000\108\000\107\000\000\000\
\108\000\108\000\000\000\108\000\108\000\000\000\108\000\000\000\
\108\000\000\000\000\000\107\000\108\000\000\000\000\000\000\000\
\000\000\108\000\000\000\000\000\000\000\110\000\108\000\000\000\
\110\000\110\000\000\000\110\000\110\000\000\000\110\000\000\000\
\110\000\000\000\000\000\108\000\110\000\000\000\000\000\000\000\
\000\000\110\000\000\000\000\000\000\000\109\000\110\000\000\000\
\109\000\109\000\000\000\109\000\109\000\000\000\109\000\000\000\
\109\000\000\000\000\000\110\000\109\000\000\000\000\000\112\000\
\112\000\109\000\112\000\112\000\000\000\112\000\109\000\112\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\112\000\000\000\000\000\109\000\000\000\112\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\112\000"

let yycheck = "\191\000\
\000\000\000\000\229\000\011\001\000\000\000\000\011\001\000\000\
\200\000\238\000\000\000\011\001\000\000\038\000\039\000\036\001\
\011\001\000\000\011\001\000\000\212\000\011\001\000\000\011\001\
\000\000\217\000\218\000\011\001\027\001\011\001\031\001\011\001\
\018\000\019\000\020\000\021\000\041\001\036\001\230\000\033\001\
\048\001\034\001\234\000\235\000\030\000\031\000\041\001\068\001\
\048\001\035\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\041\001\048\001\041\001\048\001\055\001\033\001\088\000\
\033\001\090\000\006\001\004\000\011\001\049\001\041\001\011\001\
\041\001\030\001\054\001\012\000\005\000\057\001\058\001\059\001\
\053\001\054\001\011\001\011\001\064\001\065\001\066\001\058\001\
\045\001\069\001\070\001\034\001\063\001\079\000\080\000\081\000\
\069\001\030\001\004\001\035\001\073\001\007\001\039\000\040\000\
\030\001\034\001\039\001\008\001\133\000\038\000\004\001\040\000\
\045\001\046\001\008\001\044\000\027\001\018\001\033\001\045\001\
\046\001\004\001\005\001\059\001\039\001\036\001\002\001\003\001\
\114\000\115\000\116\000\117\000\118\000\119\000\120\000\121\000\
\011\001\123\000\124\000\011\001\062\001\063\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\091\000\128\000\093\000\032\001\087\000\033\001\
\089\000\011\001\036\001\092\000\011\001\004\001\038\001\005\001\
\007\001\008\001\042\001\062\001\063\001\004\001\049\001\036\001\
\039\001\040\001\039\001\054\001\071\001\011\001\057\001\058\001\
\059\001\011\001\071\001\034\001\033\001\064\001\065\001\066\001\
\037\001\036\001\069\001\070\001\039\001\011\001\011\001\062\001\
\072\001\073\001\049\001\011\001\051\001\052\001\053\001\054\001\
\034\001\072\001\057\001\058\001\059\001\007\001\008\001\011\001\
\010\001\064\001\065\001\066\001\045\001\046\001\069\001\049\001\
\007\001\034\001\009\001\036\001\054\001\033\001\034\001\057\001\
\058\001\059\001\011\001\061\001\049\001\009\001\064\001\065\001\
\066\001\054\001\007\001\069\001\057\001\058\001\059\001\034\001\
\011\001\036\001\000\000\064\001\065\001\066\001\028\001\029\001\
\069\001\033\001\034\001\037\001\038\001\004\001\011\001\007\001\
\004\001\008\001\009\001\004\001\008\001\009\001\004\001\010\001\
\004\001\010\001\008\001\009\001\008\001\009\001\005\001\004\001\
\007\001\008\001\007\001\010\001\004\001\007\001\038\001\030\001\
\008\001\009\001\030\001\000\000\011\001\034\001\074\001\036\001\
\039\001\011\001\039\001\039\001\011\001\011\001\045\001\013\001\
\074\001\039\001\011\001\039\001\008\001\050\001\001\000\002\000\
\003\000\004\000\005\000\034\001\026\001\000\000\062\001\063\001\
\011\001\037\001\038\001\221\000\222\000\035\001\001\001\068\001\
\038\001\034\001\049\001\062\001\063\001\011\001\013\001\054\001\
\013\001\056\001\057\001\058\001\059\001\225\000\226\000\000\000\
\049\001\064\001\065\001\066\001\053\001\054\001\069\001\011\001\
\057\001\058\001\059\001\047\001\060\001\067\001\049\001\064\001\
\065\001\066\001\046\001\054\001\069\001\000\000\057\001\058\001\
\059\001\000\000\011\001\049\001\013\001\064\001\065\001\066\001\
\054\001\000\000\069\001\057\001\058\001\059\001\000\000\000\000\
\000\000\026\001\064\001\065\001\066\001\011\001\011\001\069\001\
\013\001\036\001\035\001\034\001\034\001\038\001\039\001\039\001\
\031\001\042\001\043\001\013\001\011\001\026\001\013\001\033\001\
\034\001\000\000\036\001\037\001\032\001\039\001\035\001\041\001\
\048\001\038\001\070\001\026\001\011\001\042\001\043\001\040\001\
\050\001\011\001\067\001\046\001\035\001\055\001\044\001\038\001\
\028\001\029\001\030\001\042\001\043\001\033\001\034\001\038\001\
\036\001\011\001\068\001\011\001\034\001\034\001\067\001\034\001\
\044\001\045\001\046\001\034\001\034\001\034\001\034\001\030\001\
\033\001\050\001\033\001\034\001\067\001\036\001\037\001\036\001\
\039\001\036\001\041\001\036\001\000\000\044\001\045\001\046\001\
\068\001\038\001\050\001\050\001\039\001\011\001\039\001\034\001\
\055\001\030\001\034\001\034\001\033\001\034\001\034\001\036\001\
\037\001\034\001\039\001\034\001\041\001\068\001\034\001\044\001\
\045\001\046\001\034\001\041\000\011\000\050\001\051\000\046\000\
\176\000\049\000\055\001\030\001\105\000\131\000\033\001\034\001\
\058\000\036\001\037\001\195\000\039\001\106\000\041\001\068\001\
\181\000\044\001\045\001\179\000\240\000\033\001\237\000\050\001\
\034\001\073\001\207\000\223\000\055\001\030\001\224\000\036\001\
\033\001\034\001\043\000\036\001\037\001\255\255\039\001\084\000\
\041\001\068\001\255\255\044\001\045\001\255\255\255\255\255\255\
\255\255\050\001\255\255\255\255\255\255\030\001\055\001\255\255\
\033\001\034\001\255\255\036\001\037\001\255\255\039\001\255\255\
\041\001\255\255\255\255\068\001\045\001\255\255\255\255\255\255\
\255\255\050\001\255\255\255\255\255\255\030\001\055\001\255\255\
\033\001\034\001\255\255\036\001\037\001\255\255\039\001\255\255\
\041\001\255\255\255\255\068\001\045\001\255\255\255\255\255\255\
\255\255\050\001\255\255\255\255\255\255\030\001\055\001\255\255\
\033\001\034\001\255\255\036\001\037\001\255\255\039\001\255\255\
\041\001\255\255\255\255\068\001\045\001\255\255\255\255\033\001\
\034\001\050\001\036\001\037\001\255\255\039\001\055\001\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\050\001\255\255\255\255\068\001\255\255\055\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\068\001"

let yynames_const = "\
  ARROW\000\
  ABELARD\000\
  ELOISE\000\
  RULES_START\000\
  STATE_PROPS_START\000\
  EMPTY_WORD\000\
  MU_PROP_START\000\
  PROP_VAL_START\000\
  BP_START\000\
  INTERESTING_CONFIGS\000\
  BOX\000\
  DIAMOND\000\
  BACKBOX\000\
  BACKDIAMOND\000\
  LCONSTRAINBOX\000\
  LCONSTRAINDIAMOND\000\
  LNEGCONSTRAINBOX\000\
  LNEGCONSTRAINDIAMOND\000\
  LCONSTRAINBACKBOX\000\
  LCONSTRAINBACKDIAMOND\000\
  LNEGCONSTRAINBACKBOX\000\
  LNEGCONSTRAINBACKDIAMOND\000\
  NONDET\000\
  ASSIGN\000\
  EQ_OP\000\
  NE_OP\000\
  IMPLIES\000\
  DECL\000\
  ENFORCE\000\
  TERNARY\000\
  SEMI_COLON\000\
  APOS\000\
  COMMA\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LSQUARE\000\
  RSQUARE\000\
  BANG\000\
  TILDE\000\
  CARET\000\
  OR\000\
  AND\000\
  LT\000\
  GT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ELSIF\000\
  FI\000\
  WHILE\000\
  DO\000\
  OD\000\
  RETURN\000\
  SKIP\000\
  GOTO\000\
  BEG\000\
  END\000\
  BOOL\000\
  VOID\000\
  ASSERT\000\
  ASSUME\000\
  PRINT\000\
  CHOOSE\000\
  CONSTRAIN\000\
  DEAD\000\
  ABORTIF\000\
  DFS\000\
  MU\000\
  NU\000\
  PUNCT\000\
  EOF\000\
  EOL\000\
  FIXEDPOINT\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  TICKED_IDENTIFIER\000\
  INTEGER\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'game_def) in
    Obj.repr(
# 115 "parser.mly"
                 ( _1 )
# 658 "parser.ml"
               : Parity_game.parity_game))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rules) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'props) in
    Obj.repr(
# 118 "parser.mly"
                                        ( make_parity_game _1 _2 [] )
# 666 "parser.ml"
               : 'game_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'props) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rules) in
    Obj.repr(
# 119 "parser.mly"
                                        ( make_parity_game _2 _1 [] )
# 674 "parser.ml"
               : 'game_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'rules) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'props) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'interesting_configs) in
    Obj.repr(
# 120 "parser.mly"
                                        ( make_parity_game _1 _2 _3 )
# 683 "parser.ml"
               : 'game_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rule_list) in
    Obj.repr(
# 124 "parser.mly"
                           ( let pds = new Pds.pds in
                             let do_rule r = pds#add_rule r in
                             List.iter do_rule _2;
                             pds )
# 693 "parser.ml"
               : 'rules))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rule_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rule) in
    Obj.repr(
# 130 "parser.mly"
                   ( _2::_1 )
# 701 "parser.ml"
               : 'rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rule) in
    Obj.repr(
# 131 "parser.mly"
                   ( [_1] )
# 708 "parser.ml"
               : 'rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'word) in
    Obj.repr(
# 134 "parser.mly"
                                                           ( 
        Pds.make_rule (Pds.make_control_state _1)
                      (Words.make_character _2)
                      (Pds.make_control_state _4)
                      (Words.make_word _5) 
    )
# 723 "parser.ml"
               : 'rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'word) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 142 "parser.mly"
                     ( List.append _1 [Words.make_character _2] )
# 731 "parser.ml"
               : 'word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 143 "parser.mly"
                     ( [Words.make_character _1] )
# 738 "parser.ml"
               : 'word))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
               ( [] )
# 744 "parser.ml"
               : 'word))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prop_list) in
    Obj.repr(
# 147 "parser.mly"
                                ( new Parity_game.property_map _2 )
# 751 "parser.ml"
               : 'props))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prop_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'property) in
    Obj.repr(
# 150 "parser.mly"
                       ( _2::_1 )
# 759 "parser.ml"
               : 'prop_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'property) in
    Obj.repr(
# 151 "parser.mly"
             ( [_1] )
# 766 "parser.ml"
               : 'prop_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 154 "parser.mly"
                                          ( (Pds.make_control_state _1, Parity_game.A, _3) )
# 774 "parser.ml"
               : 'property))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 155 "parser.mly"
                                         ( (Pds.make_control_state _1, Parity_game.E, _3) )
# 782 "parser.ml"
               : 'property))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'config_list) in
    Obj.repr(
# 158 "parser.mly"
                                    ( _2 )
# 789 "parser.ml"
               : 'interesting_configs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'config_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'config) in
    Obj.repr(
# 161 "parser.mly"
                       ( _2::_1 )
# 797 "parser.ml"
               : 'config_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'config) in
    Obj.repr(
# 162 "parser.mly"
           ( [_1] )
# 804 "parser.ml"
               : 'config_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'word) in
    Obj.repr(
# 165 "parser.mly"
                               ( (Pds.make_control_state _1, Words.make_word _2) )
# 812 "parser.ml"
               : 'config))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'program) in
    Obj.repr(
# 185 "parser.mly"
            ( _1 )
# 819 "parser.ml"
               : Bp.boolean_program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'g_decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_list) in
    Obj.repr(
# 190 "parser.mly"
                         ( (_1, _2) )
# 827 "parser.ml"
               : 'program))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'g_identifier_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'g_decl_list) in
    Obj.repr(
# 198 "parser.mly"
   (
	  	List.append _2 _4
	  )
# 837 "parser.ml"
               : 'g_decl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
   ( [] )
# 843 "parser.ml"
               : 'g_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'g_decl_id) in
    Obj.repr(
# 205 "parser.mly"
   (
	  	[_1]
	  )
# 852 "parser.ml"
               : 'g_identifier_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'g_identifier_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'g_decl_id) in
    Obj.repr(
# 209 "parser.mly"
      (
        _3::_1
      )
# 862 "parser.ml"
               : 'g_identifier_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 215 "parser.mly"
   (
	  	_1
	  )
# 871 "parser.ml"
               : 'g_decl_id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'identifier_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'decl_list) in
    Obj.repr(
# 221 "parser.mly"
   (
	  	List.append _2 _4
	  )
# 881 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "parser.mly"
   ( [] )
# 887 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_id) in
    Obj.repr(
# 228 "parser.mly"
   (
	  	[_1]
	  )
# 896 "parser.ml"
               : 'identifier_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'decl_id) in
    Obj.repr(
# 232 "parser.mly"
   (
	  	_3::_1
	  )
# 906 "parser.ml"
               : 'identifier_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 237 "parser.mly"
   (
	  	_1
	  )
# 915 "parser.ml"
               : 'decl_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 244 "parser.mly"
                       ( [_1] )
# 922 "parser.ml"
               : 'fun_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'function_definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_list) in
    Obj.repr(
# 245 "parser.mly"
                                ( _1::_2 )
# 930 "parser.ml"
               : 'fun_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'function_heading) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'parms) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'decl_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'enforce) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'abortif) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 250 "parser.mly"
   (
        let (ret_type, name) = _1 in
        (ret_type, name, _2, _4, _5, _6, _7)
	  )
# 945 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fun_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 258 "parser.mly"
   (
	  	(_1, _2)
	  )
# 955 "parser.ml"
               : 'function_heading))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fun_search_order) in
    Obj.repr(
# 264 "parser.mly"
                            ( Bp.Bool(1)  )
# 962 "parser.ml"
               : 'fun_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fun_search_order) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 265 "parser.mly"
                                       ( Bp.Bool(_4) )
# 970 "parser.ml"
               : 'fun_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fun_search_order) in
    Obj.repr(
# 266 "parser.mly"
                            ( Bp.Void )
# 977 "parser.ml"
               : 'fun_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "parser.mly"
       ( (* don't know what this is, Bob *) )
# 983 "parser.ml"
               : 'fun_search_order))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "parser.mly"
   ( (* . . . *) )
# 989 "parser.ml"
               : 'fun_search_order))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 276 "parser.mly"
   (
	  	_2
	  )
# 998 "parser.ml"
               : 'enforce))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "parser.mly"
   (
	  	Bp.True
	  )
# 1006 "parser.ml"
               : 'enforce))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 286 "parser.mly"
   (
	  	_2
	  )
# 1015 "parser.ml"
               : 'abortif))
; (fun __caml_parser_env ->
    Obj.repr(
# 290 "parser.mly"
   (
	  	Bp.False
	  )
# 1023 "parser.ml"
               : 'abortif))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'parameter_list) in
    Obj.repr(
# 295 "parser.mly"
   (
	  	_2
	  )
# 1032 "parser.ml"
               : 'parms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier_list) in
    Obj.repr(
# 301 "parser.mly"
                   ( _1 )
# 1039 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 303 "parser.mly"
   (
	  	[]
	  )
# 1047 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'labelled_statement) in
    Obj.repr(
# 311 "parser.mly"
      (
	  	[_1]
	  )
# 1056 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'labelled_statement) in
    Obj.repr(
# 315 "parser.mly"
   (
	  	List.append _1 [_2]
	  )
# 1066 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 319 "parser.mly"
      (
	  	_1
      )
# 1075 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'label_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 326 "parser.mly"
   (
	  	(_1, _2)
	  )
# 1085 "parser.ml"
               : 'labelled_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 330 "parser.mly"
   (
	  	([], _1)
	  )
# 1094 "parser.ml"
               : 'labelled_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 337 "parser.mly"
    (
	  		_2::_1
		  )
# 1104 "parser.ml"
               : 'label_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 341 "parser.mly"
    (
	  		[_1]
		  )
# 1113 "parser.ml"
               : 'label_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'target_label_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 348 "parser.mly"
    (
		  	List.append _1 [_3]
		  )
# 1123 "parser.ml"
               : 'target_label_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 352 "parser.mly"
    (
		  	[_1]
		  )
# 1132 "parser.ml"
               : 'target_label_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dead_statement) in
    Obj.repr(
# 358 "parser.mly"
                                ( _1 )
# 1139 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'parallel_assign) in
    Obj.repr(
# 359 "parser.mly"
                                 ( _1 )
# 1146 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'assert_stmt) in
    Obj.repr(
# 360 "parser.mly"
                             ( _1 )
# 1153 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'assume) in
    Obj.repr(
# 361 "parser.mly"
                        ( _1 )
# 1160 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'print) in
    Obj.repr(
# 362 "parser.mly"
                       ( _1 )
# 1167 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'call) in
    Obj.repr(
# 363 "parser.mly"
                      ( let (name, args) = _1 in Bp.Call([], name, args) )
# 1174 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'selection_statement) in
    Obj.repr(
# 364 "parser.mly"
                          ( _1 )
# 1181 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'iteration_statement) in
    Obj.repr(
# 365 "parser.mly"
                          ( _1 )
# 1188 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'jump_statement) in
    Obj.repr(
# 366 "parser.mly"
                                ( _1 )
# 1195 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assign_id_list) in
    Obj.repr(
# 371 "parser.mly"
      (
	  	Bp.UnsupportedStatement
      )
# 1204 "parser.ml"
               : 'dead_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'assign_id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assign_expression_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assign_constrain_opt) in
    Obj.repr(
# 378 "parser.mly"
   (
	  	Bp.Assign(_1, _3, _4)
	  )
# 1215 "parser.ml"
               : 'parallel_assign))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assign_id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'call) in
    Obj.repr(
# 382 "parser.mly"
   ( 
        let (id, args) = _3 in
	  	Bp.Call(_1, id, args)
	  )
# 1226 "parser.ml"
               : 'parallel_assign))
; (fun __caml_parser_env ->
    Obj.repr(
# 388 "parser.mly"
   (  Bp.True )
# 1232 "parser.ml"
               : 'assign_constrain_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 390 "parser.mly"
   (  _2 )
# 1239 "parser.ml"
               : 'assign_constrain_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'choose_expression) in
    Obj.repr(
# 395 "parser.mly"
   (
	  	[_1]
	  )
# 1248 "parser.ml"
               : 'assign_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assign_expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'choose_expression) in
    Obj.repr(
# 399 "parser.mly"
   (
	  	List.append _1 [_3]
	  )
# 1258 "parser.ml"
               : 'assign_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asgn_id) in
    Obj.repr(
# 405 "parser.mly"
   (
	  	[_1]
	  )
# 1267 "parser.ml"
               : 'assign_id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assign_id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asgn_id) in
    Obj.repr(
# 409 "parser.mly"
   (
	  	List.append _1 [_3]
	  )
# 1277 "parser.ml"
               : 'assign_id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 415 "parser.mly"
   (
	  	_1
	  )
# 1286 "parser.ml"
               : 'asgn_id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 421 "parser.mly"
   (
	  	Bp.Assert(_2)
	  )
# 1295 "parser.ml"
               : 'assert_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 427 "parser.mly"
   (
	  	Bp.Assume(_2)
	  )
# 1304 "parser.ml"
               : 'assume))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 433 "parser.mly"
   (
	  	Bp.UnsupportedStatement
	  )
# 1313 "parser.ml"
               : 'print))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 439 "parser.mly"
   (
	  	(_1, _3)
	  )
# 1323 "parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 443 "parser.mly"
   (
	  	(_1, [])
	  )
# 1332 "parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'choose_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'elsif_list) in
    Obj.repr(
# 449 "parser.mly"
   (
	  	Bp.If(_2, _4, _5)
	  )
# 1343 "parser.ml"
               : 'selection_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 455 "parser.mly"
   (	
	  	[]
	  )
# 1351 "parser.ml"
               : 'elsif_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 459 "parser.mly"
   (	
	  	_2
	  )
# 1360 "parser.ml"
               : 'elsif_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'choose_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'elsif_list) in
    Obj.repr(
# 463 "parser.mly"
   (	
	  	[([], Bp.If(_2, _4, _5))]
	  )
# 1371 "parser.ml"
               : 'elsif_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 469 "parser.mly"
   (
	  	Bp.While(_2, _4)
	  )
# 1381 "parser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 475 "parser.mly"
   (
	  	Bp.Return([])
	  )
# 1389 "parser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 479 "parser.mly"
   (
	  	Bp.Return(_2)
	  )
# 1398 "parser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 483 "parser.mly"
   (
	  	Bp.Skip
	  )
# 1406 "parser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'target_label_list) in
    Obj.repr(
# 487 "parser.mly"
   (
	  	Bp.Goto(_2)
	  )
# 1415 "parser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 496 "parser.mly"
   (
	  	_2
  	  )
# 1424 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 500 "parser.mly"
      (
	  	Bp.Nondet
      )
# 1432 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 504 "parser.mly"
   (
	  	Bp.Choose(_3, _5)
	  )
# 1442 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 508 "parser.mly"
   ( 
	  	Bp.Id(_1)
	  )
# 1451 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 512 "parser.mly"
   (
	  	Bp.AposId(_2)
	  )
# 1460 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 516 "parser.mly"
   ( 
	  	if _1 = 0 then Bp.False else Bp.True
	  )
# 1469 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 522 "parser.mly"
                      ( _1 )
# 1476 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unary_operator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 524 "parser.mly"
   ( 
	  	Bp.Un(_1, _2)
	  )
# 1486 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 530 "parser.mly"
         ( Bp.Not )
# 1492 "parser.ml"
               : 'unary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 531 "parser.mly"
         ( Bp.Not )
# 1498 "parser.ml"
               : 'unary_operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 534 "parser.mly"
                     ( _1 )
# 1505 "parser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 536 "parser.mly"
   ( 
	  	Bp.Bin(_1, Bp.Equal, _3)
	  )
# 1515 "parser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 540 "parser.mly"
   ( 
	  	Bp.Bin(_1, Bp.NEqual, _3)
	  )
# 1525 "parser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 546 "parser.mly"
                       ( _1 )
# 1532 "parser.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 548 "parser.mly"
   ( 
	  	Bp.Bin(_1, Bp.And, _3)
	  )
# 1542 "parser.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 554 "parser.mly"
                  ( _1 )
# 1549 "parser.ml"
               : 'exclusive_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exclusive_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 556 "parser.mly"
   ( 
	  	Bp.Bin(_1, Bp.XOr, _3)
	  )
# 1559 "parser.ml"
               : 'exclusive_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exclusive_or_expression) in
    Obj.repr(
# 562 "parser.mly"
                           ( _1 )
# 1566 "parser.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exclusive_or_expression) in
    Obj.repr(
# 564 "parser.mly"
   ( 
	  	Bp.Bin(_1, Bp.Or, _3)
	  )
# 1576 "parser.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exclusive_or_expression) in
    Obj.repr(
# 568 "parser.mly"
   ( 
	  	Bp.Bin(_1, Bp.Implies, _3)
	  )
# 1586 "parser.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expression) in
    Obj.repr(
# 574 "parser.mly"
                 ( _1 )
# 1593 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'or_expression) in
    Obj.repr(
# 576 "parser.mly"
   ( 
	  	Bp.Ternary(_1, _3, _5)
	  )
# 1604 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 582 "parser.mly"
              ( _1 )
# 1611 "parser.ml"
               : 'choose_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'choose_expression) in
    Obj.repr(
# 587 "parser.mly"
   ( 
	  	[_1]
	  )
# 1620 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'choose_expression) in
    Obj.repr(
# 591 "parser.mly"
   ( 
	  	List.append _1 [_3]
	  )
# 1630 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 605 "parser.mly"
                 ( 
            if (id_starts_lowercase _1) then
                Mucalc.Prop(_1)
            else
                Mucalc.Var(_1) 
        )
# 1642 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 611 "parser.mly"
                      ( Mucalc.Un(Mucalc.Not, _2) )
# 1649 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Mucalc.mu_formula) in
    Obj.repr(
# 612 "parser.mly"
                               ( _2 )
# 1656 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 613 "parser.mly"
                     ( Mucalc.Un(Mucalc.Box, _2) )
# 1663 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 614 "parser.mly"
                         ( Mucalc.Un(Mucalc.Diamond, _2) )
# 1670 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 615 "parser.mly"
                         ( Mucalc.Un(Mucalc.BackBox, _2) )
# 1677 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 616 "parser.mly"
                             ( Mucalc.Un(Mucalc.BackDiamond, _2) )
# 1684 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'proposition_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 617 "parser.mly"
                                                        ( 
            Mucalc.ConstrainUn(Mucalc.ConstrainBox, _2, _4) 
        )
# 1694 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'proposition_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 620 "parser.mly"
                                                       ( 
            Mucalc.ConstrainUn(Mucalc.ConstrainDiamond, _2, _4) 
        )
# 1704 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'proposition_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 623 "parser.mly"
                                                           ( 
            Mucalc.ConstrainUn(Mucalc.NegConstrainBox, _2, _4) 
        )
# 1714 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'proposition_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 626 "parser.mly"
                                                          ( 
            Mucalc.ConstrainUn(Mucalc.NegConstrainDiamond, _2, _4) 
        )
# 1724 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'proposition_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 629 "parser.mly"
                                                            ( 
            Mucalc.ConstrainUn(Mucalc.ConstrainBackBox, _2, _4) 
        )
# 1734 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'proposition_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 632 "parser.mly"
                                                           ( 
            Mucalc.ConstrainUn(Mucalc.ConstrainBackDiamond, _2, _4) 
        )
# 1744 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'proposition_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 635 "parser.mly"
                                                               ( 
            Mucalc.ConstrainUn(Mucalc.NegConstrainBackBox, _2, _4) 
        )
# 1754 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'proposition_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 638 "parser.mly"
                                                              ( 
            Mucalc.ConstrainUn(Mucalc.NegConstrainBackDiamond, _2, _4) 
        )
# 1764 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Mucalc.mu_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 641 "parser.mly"
                                ( Mucalc.Bin(_1,Mucalc.And,_3) )
# 1772 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Mucalc.mu_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 642 "parser.mly"
                               ( Mucalc.Bin(_1,Mucalc.Or,_3) )
# 1780 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Mucalc.mu_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 643 "parser.mly"
                                    ( Mucalc.Bin(_1,Mucalc.Implies,_3) )
# 1788 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 644 "parser.mly"
                                                      ( 
            if (id_starts_lowercase _2) then (
                parse_error ("Variable name '" ^ _2 ^ "' must start with an uppercase character.");
                Mucalc.Mu("parse error",_4)
            ) else
                Mucalc.Mu(_2,_4)
        )
# 1802 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 651 "parser.mly"
                                                      ( 
            if (id_starts_lowercase _2) then (
                parse_error ("Variable name '" ^ _2 ^ "' must start with an uppercase character.");
                Mucalc.Nu("parse error",_4)
            ) else
                Mucalc.Nu(_2,_4)
        )
# 1816 "parser.ml"
               : Mucalc.mu_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'rules) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'mu_property) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'props_val) in
    Obj.repr(
# 670 "parser.mly"
                                    ( make_pds_mucalc _1 [] _2 _3 )
# 1825 "parser.ml"
               : Pds_mucalc.pds_mucalc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'rules) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'props_val) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'mu_property) in
    Obj.repr(
# 671 "parser.mly"
                                    ( make_pds_mucalc _1 [] _3 _2 )
# 1834 "parser.ml"
               : Pds_mucalc.pds_mucalc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mu_property) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'rules) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'props_val) in
    Obj.repr(
# 672 "parser.mly"
                                    ( make_pds_mucalc _2 [] _1 _3 )
# 1843 "parser.ml"
               : Pds_mucalc.pds_mucalc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mu_property) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'props_val) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rules) in
    Obj.repr(
# 673 "parser.mly"
                                    ( make_pds_mucalc _3 [] _1 _2 )
# 1852 "parser.ml"
               : Pds_mucalc.pds_mucalc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'props_val) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'rules) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'mu_property) in
    Obj.repr(
# 674 "parser.mly"
                                    ( make_pds_mucalc _2 [] _3 _1 )
# 1861 "parser.ml"
               : Pds_mucalc.pds_mucalc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'props_val) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'mu_property) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rules) in
    Obj.repr(
# 675 "parser.mly"
                                    ( make_pds_mucalc _3 [] _2 _1 )
# 1870 "parser.ml"
               : Pds_mucalc.pds_mucalc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'rules) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'interesting_configs) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'mu_property) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'props_val) in
    Obj.repr(
# 676 "parser.mly"
                                                        ( make_pds_mucalc _1 _2 _3 _4 )
# 1880 "parser.ml"
               : Pds_mucalc.pds_mucalc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Mucalc.mu_formula) in
    Obj.repr(
# 679 "parser.mly"
                             ( _2 )
# 1887 "parser.ml"
               : 'mu_property))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'head_val_list) in
    Obj.repr(
# 682 "parser.mly"
                                 ( new Pds_mucalc.proposition_map _2 )
# 1894 "parser.ml"
               : 'props_val))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'head_val_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'head_props) in
    Obj.repr(
# 685 "parser.mly"
                             ( _2::_1 )
# 1902 "parser.ml"
               : 'head_val_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'head_props) in
    Obj.repr(
# 686 "parser.mly"
                          ( [_1] )
# 1909 "parser.ml"
               : 'head_val_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'proposition_list) in
    Obj.repr(
# 689 "parser.mly"
                                                      ( 
        (Pds.make_control_state _1, 
         Words.make_character _2,
         _3) 
    )
# 1922 "parser.ml"
               : 'head_props))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'proposition_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 696 "parser.mly"
                                ( 
        if (id_starts_lowercase _2) then
            _2::_1
        else (
            parse_error ("In proposition list, proposition '" ^ _2 ^ "' does not start lowercase.");
            failwith "";
        )
    )
# 1937 "parser.ml"
               : 'proposition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 704 "parser.mly"
               (
         if (id_starts_lowercase _1) then
            [_1]
        else (
            parse_error ("In proposition list, proposition '" ^ _1 ^ "' does not start lowercase.");
            failwith "";
        )
    )
# 1951 "parser.ml"
               : 'proposition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mu_property) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bp) in
    Obj.repr(
# 720 "parser.mly"
                       ( new Bp_mucalc.bp_mucalc _2 _1 )
# 1959 "parser.ml"
               : Bp_mucalc.bp_mucalc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mu_property) in
    Obj.repr(
# 721 "parser.mly"
                       ( new Bp_mucalc.bp_mucalc _1 _2 )
# 1967 "parser.ml"
               : Bp_mucalc.bp_mucalc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Bp.boolean_program) in
    Obj.repr(
# 724 "parser.mly"
                             ( _2 )
# 1974 "parser.ml"
               : 'bp))
(* Entry parity_game *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry boolean_program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry mu_formula *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pds_mucalc *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry bp_mucalc *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let parity_game (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Parity_game.parity_game)
let boolean_program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Bp.boolean_program)
let mu_formula (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Mucalc.mu_formula)
let pds_mucalc (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Pds_mucalc.pds_mucalc)
let bp_mucalc (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Bp_mucalc.bp_mucalc)
