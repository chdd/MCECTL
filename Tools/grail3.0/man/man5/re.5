.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH RE 5 "Grail"
.SH NAME
re \- format for regular expressions
.SH DESCRIPTION
.LP
\fIGrail\fR's format for regular expressions is very similar to the
conventional representation.  The following are regular expressions:
.EX
{}		\fIempty set\fR
""		\fIempty string\fR
a-b,A-Z		\fIany single letter\fR
\fIxy\fR		\fIconcatenation of two expressions\fR
\fIx\fR + \fIy\fR		\fIalternation of two expressions\fR
\fIx*\fR		\fIKleene star\fR
.EE
.LP
Regular expressions can employ only the standard alphabetic characters; 
digits and special punctuation symbols are not permitted.
.LP
\fIGrail\fR follows the normal rules of precedence for regular
expressions; Kleene star is highest, next is concatentation,
and lowest is alternation.  Parentheses can be used to group 
subexpressions to override precedence.
.LP
Internally, \fIGrail\fR stores regular expressions as a kind of
expression tree, and thus with minimum parenthesization.
.LP
\fIGrail\fR supports parameterizable regular expressions.  If
the alphabet of your expressions is not the ASCII characters,
then the symbols in the regular expression will be a textual
representation of the objects in your alphabet.
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
fm(5)
