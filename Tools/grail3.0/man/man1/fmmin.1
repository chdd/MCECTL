.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH fmmin 1 "Grail"
.SH NAME
fmmin \- compute the minimal machine
.SH SYNOPSIS
.B fmmin fm
.sp
.B fmmin <fm
.SH DESCRIPTION
.B
fmmin
computes the minimal machine that accepts the same language
as \fIfm\fR, and writes the result on the standard output. 
.B
fmmin
returns 0 if the input machine is non-deterministic.
The machine can be made deterministic by first filtering
it with 
.B
fmdeterm.
.B
fmmin
uses Hopcroft's partition algorithm.
It removes unreachable states.
.LP
\fIfm\fR must conform to the Grail format for machines.
.SH EXAMPLES
.EX
% cat dfm
(START) |- 0
0 a 1
0 b 2
1 c 1
2 c 2
1 d 3
2 d 4
3 -| (FINAL)
4 -| (FINAL)

% fmmin dfm
(START) |- 1
1 a 2
1 b 2
2 c 2
2 d 0
0 -| (FINAL)


% cat nfm2
(START) |- 1
1 a 2
1 a 3
1 a 4
2 -| (FINAL)
3 -| (FINAL)
4 -| (FINAL)

% cat nfm2 | fmdeterm | fmmin
(START) |- 1
1 a 0 
0 -| (FINAL) 

.EE
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
fm(5), fmminrev(1), fmdeterm(1)
