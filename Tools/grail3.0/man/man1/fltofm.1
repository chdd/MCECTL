.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH fltofm 1 "Grail"
.SH NAME
fltofm \- convert a finite language to a machine
.SH SYNOPSIS
.B fltofm fl
.sp
.B fltofm <fl
.SH DESCRIPTION
.B
fltofm
computes a finite-state machine that accepts the same language as
\fIfl\fR, and writes it on standard output.  The result
is guaranteed to be deterministic.
.LP
\fIfl\fR must conform to the Grail format for finite languages.
.LP
Empty languages will produce empty machines.  If the empty string belongs
to the language, then the machine's start state is also an end state.
.LP
The machine is generated as a trie, but will likely be non-minimal.
.SH EXAMPLES
.EX
% cat fl1
abcf
abff
ab

cde

% fltofm <fl1
(START) |- 0
0 a 1
1 b 2
2 c 3
3 f 4
2 f 5
5 f 6
0 c 7
7 d 8
8 e 9
4 -| (FINAL)
6 -| (FINAL) 
2 -| (FINAL)
0 -| (FINAL)
9 -| (FINAL)

.EE
.SH AUTHORS
Roger Robson, Darrell Raymond and Derick Wood, the Grail project

.SH "SEE ALSO"
fl(5), fm(5), fmtofl(1)
