.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH fmtore 1 "Grail"
.SH NAME
fmtore \- convert a machine to a regular expression
.SH SYNOPSIS
.B fmtore fm
.sp
.B fmtore <fm
.SH DESCRIPTION
.B
fmtore
computes a regular expression that accepts the same language
as \fIfm\fR, and writes the result on standard output.  
The input need not be deterministic.  All unreachable
states will be removed.
.LP
.B
fmtore
uses the state elimination method for producing the regular
expression.
.LP
\fIfm\fR must conform to the Grail format for machines.
.SH EXAMPLES
.EX
% cat dfm5
(START) |- 0
0 a 1
1 c 2
2 e 3
3 -| (FINAL)
1 b 0
2 d 0

% fmtore <dfm5
a(ba)*c(da(ba)*c)*e

% cat nfm1
(START) |- 1
1 a 2
1 a 3
2 b 2
3 b 3
2 c 4
3 c 5
4 d 4
5 d 5
4 -| (FINAL)
5 -| (FINAL)

% fmtore nfm1
ab*cd*
.EE
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
fm(5), re(5), retofm(1)
