.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH fmunion 1 "Grail"
.SH NAME
fmunion \- compute the union of two machines
.SH SYNOPSIS
.B fmunion fm1 fm2
.sp
.B fmunion fm2 <fm1 
.SH DESCRIPTION
.B
fmunion
computes the union of \fIfm1\fR and \fIfm2\fR.  This is done
by renumbering the states of \fIfm2\fR and then appending
its instructions to those of \fIfm1\fR.
The input need not be deterministic.
.LP
\fIfm1\fR and \fIfm2\fR must conform to the Grail format 
for machines.
.SH EXAMPLES
.EX
% cat dfm1
(START) |- 0
0 a 1
1 b 2
2 -| (FINAL)

% cat dfm3
(START) |- 0
0 a 1
0 b 4
1 c 2
2 d 3
3 -| (FINAL)
4 e 5
5 f 6
6 -| (FINAL)

% fmunion dfm1 dfm3
(START) |- 0
(START) |- 3
0 a 1
1 b 2
3 a 4
3 b 7
4 c 5
5 d 6
7 e 8
8 f 9
2 -| (FINAL)
6 -| (FINAL)
9 -| (FINAL)

.EE
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
fm(5), fmrenum(1)
