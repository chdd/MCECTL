.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH fmdeterm 1 "Grail"
.SH NAME
fmdeterm \- make a machine deterministic
.SH SYNOPSIS
.B fmdeterm fm
.sp
.B fmdeterm <fm
.SH DESCRIPTION
.B
fmdeterm
computes a deterministic machine from \fIfm\fR, using 
the subset construction method.  In a small number of
cases, this will cause an exponential increase in the
size of the machine.  
.B
fmdeterm 
removes all unreachable states.
.LP
\fIfm\fR must conform to the Grail format for machines.
.SH EXAMPLES
.EX
% cat nfm1
(START) |- 1
1 a 2
1 a 3
2 b 2
3 b 3
2 c 4
3 c 5
4 d 4
5 d 5
4 -| (FINAL)
5 -| (FINAL)

% fmdeterm nfm1
(START) |- 0
0 a 1 
1 b 1 
1 c 2 
2 d 2 
2 -| (FINAL) 

% cat nfm2
(START) |- 1
1 a 2
1 a 3
1 a 4
2 -| (FINAL)
3 -| (FINAL)
4 -| (FINAL)

% fmdeterm <nfm2
(START) |- 0
0 a 1 
1 -| (FINAL) 

.EE
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
fm(5), isdeterm(1)
