.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH remin 1 "Grail"
.SH NAME
remin \- produce minimal parenthesization of a regular expression
.SH SYNOPSIS
.B remin re
.sp
.B remin <re
.SH DESCRIPTION
.B
remin
produces the minimal parenthesization of \fIre\fR, and applies
some simple heuristics for minimizing the expression (removes
subexpressions that are catenated with the empty set, removes
the empty string from catenations, and removes redundant
subexpressions in unions).
.LP
Any other Grail filter for regular expressions will remove
superfluous parenthesis, simply by virtue of reading and
writing an expression.
.LP
\fIre\fR must conform to the Grail format for regular expressions.
.SH EXAMPLES
.EX
% cat re1
{}

% remin <re1
{}

% cat re2
""

% remin re2
""
% cat re3
(a+b)*abc

% remin re3
(a+b)*abc

% cat re4
(((a)+(b))*)

% remin re4
(a+b)*

.EE
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
re(5)
