.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH afatofm 1 "Grail"
.SH NAME
afatofm \- convert an alternating finite automaton to a \fIfm\fR
.SH SYNOPSIS
.B afatofm afa
.sp
.B afatofm < afa
.SH DESCRIPTION
.B
afatofm
reads in a given alternating finite state machine, convert it to 
an equivalent \fIdeterministic finite automaton\fR, and
then writes the \fIdfa\fR on the standard ouput. 
.LP
\fIafa\fR must conform to the Grail bit-wise format for alternating 
finite state machines.
.B
afatofm 
doesn't necessarily convert  \fIafa\fR to a complete finite state machine.
The resulting machine can only be ensured to be deterministic 
.SH EXAMPLES
.EX
% cat bitafa1
symbols: [a,b]
states:  3
finals:  5
head: 7 4
7 5
7 1
0 1
3 1
6 2
7 3

% afatofm bitafa1
(START) |- 5
5 a 1
5 b 2
2 a 4
2 b 0
0 a 0
0 b 0
4 a 0
4 b 0
1 a 0
1 b 3
3 a 4
3 b 4
4 -| (FINAL)

% afatofm < bitafa1
(START) |- 5
5 a 1
5 b 2
2 a 4
2 b 0
0 a 0
0 b 0
4 a 0
4 b 0
1 a 0
1 b 3
3 a 4
3 b 4
4 -| (FINAL)

% cat bitafa1 | afatofm
(START) |- 5
5 a 1
5 b 2
2 a 4
2 b 0
0 a 0
0 b 0
4 a 0
4 b 0
1 a 0
1 b 3
3 a 4
3 b 4
4 -| (FINAL)
.EE
.SH AUTHORS
Xiuming Wu and Sheng Yu, the Grail project
.SH "SEE ALSO"
fm(5), afa(5)
