.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH fmcomp 1 "Grail"
.SH NAME
fmcomp \- compute the completion of a machine
.SH SYNOPSIS
.B fmcomp fm
.sp
.B fmcomp <fm
.SH DESCRIPTION
.B
fmcomp
computes the completion of \fIfm\fR and writes the result on 
the standard output. 
.LP
\fIfm\fR must conform to the Grail format for machines.
.LP
A complete machine is one in which every state has a instruction
on every symbol in the alphabet.
.B
fmcomp
completes its input by creating a new `sink' state that is
used as the target of any missing instructions in the input
machine.
.LP
The alphabet used for completion is the set of symbols that
appear on instructions of the machine.
.SH EXAMPLES
.EX
% cat dfm1
(START) |- 0
0 a 1
1 b 2
2 -| (FINAL)

% fmcomp dfm1
(START) |- 0
0 a 1
1 b 2
0 b 3
2 a 3
2 b 3
1 a 3
3 a 3
3 b 3
2 -| (FINAL)


% cat nfm2
(START) |- 1
1 a 2
1 a 3
1 a 4
2 -| (FINAL)
3 -| (FINAL)
4 -| (FINAL)

% fmcomp <nfm2
(START) |- 1
1 a 2
1 a 3
1 a 4
2 a 5
3 a 5
4 a 5
5 a 5
2 -| (FINAL)
3 -| (FINAL)
4 -| (FINAL)

.EE
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
fm(5)
