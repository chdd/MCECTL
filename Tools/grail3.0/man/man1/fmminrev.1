.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH fmminrev 1 "Grail"
.SH NAME
fmminrev \- compute the minimal machine
.SH SYNOPSIS
.B fmminrev fm
.sp
.B fmminrev <fm
.SH DESCRIPTION
.B
fmminrev
computes the minimal machine that accepts the same language
as \fIfm\fR, and writes the result on the standard output. 
.B
fmminrev
can accept either a deterministic or nondeterministic machine
as input.
.B
fmminrev
computes the minimal machine by reversing, performing subset
construction (that is, by applying \fBfmdeterm\fR), reversing
again, and performing subset construction a final time).  The
result is guaranteed to be deterministic.
.LP
Machines can also be minimized by \fBfmmin\fR, which uses 
Hopcroft's partition method.  \fBfmmin\fR and \fBfmminrev\fR
produce isomorphic results (that is, identical up
to state renumbering).
.LP
\fIfm\fR must conform to the Grail format for machines.
.SH EXAMPLES
.EX
% cat dfm
(START) |- 0
0 a 1
0 b 2
1 c 1
2 c 2
1 d 3
2 d 4
3 -| (FINAL)
4 -| (FINAL)

% fmminrev <dfm
(START) |- 2
1 d 0
2 a 1
1 c 1
2 b 1
0 -| (FINAL)

% cat nfm2 
(START) |- 1
1 a 2
1 a 3
1 a 4
2 -| (FINAL)
3 -| (FINAL)
4 -| (FINAL)

% cat nfm2 | fmdeterm | fmminrev
(START) |- 0
0 a 1
1 -| (FINAL)

.EE
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
fm(5), fmmin(1), fmrevers(1), fmdeterm(1), ismorph(1)
