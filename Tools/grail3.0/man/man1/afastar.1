.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH afastar 1 "Grail"
.SH NAME
afastar \- compute `*' of a machine
.SH SYNOPSIS
.B afastar bitafa
.sp
.B afastar <bitafa
.SH DESCRIPTION
.B
afastar
computes `*' (also known as Kleene closure) of \fIafa\fR and writes 
the result on standard output. 
.LP
\fIafa\fR must conform to the Grail format for bit-wise afa.
.LP
.B
afastar
first check if the number of states of the input afa exceeds 5 or not
(because we only assume that the users work on a 32 bit computer). If it
does, the filter report \fIthe machine is too big for star\fR, Otherwise,
the filter construct the star machine.
.SH EXAMPLES
.EX
% cat bitafa1
symbols: [a,b]
states:  2
finals:  1
head: 3 2
0 1
0 1
3 1
3 1


% afastar bitafa1
symbols: [a,b]
states:  4
finals:  0
head: 15 0+4 4
1 1+4 4+8 8
1 1+4 4+8 8
15 0+2 2
15 0+2 2
2 2+15 0
2 2+15 0
0 1
0 1

.EE
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
fm(5), fmplus(1)
