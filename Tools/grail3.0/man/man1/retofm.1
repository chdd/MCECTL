.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH retofm 1 "Grail"
.SH NAME
retofm \- convert a regular expression to a machine
.SH SYNOPSIS
.B retofm re
.sp
.B retofm <re
.SH DESCRIPTION
.B
retofm
computes a finite-state machine that accepts the same language as
\fIre\fR, and writes it on standard output.  The result
is likely to be nondeterministic.
.LP
\fIre\fR must conform to the Grail format for regular expressions.
.SH EXAMPLES
.EX
% cat re1
{}

% retofm <re1

% cat re2
""

% retofm <re2
(START) |- 0
0 -| (FINAL) 

% cat re3
(a+b)*(abc)

% retofm re3
(START) |- 4
0 a 1
2 b 3
0 a 0
0 a 2
2 b 0
2 b 2
4 a 1
4 a 0
4 a 2
4 b 3
4 b 0
4 b 2
1 a 6
3 a 6
4 a 6
8 c 10
6 b 8
10 -| (FINAL)


.EE
.SH AUTHORS
Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
re(5), fm(5), fmtore(1)
