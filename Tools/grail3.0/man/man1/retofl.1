.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH retofl 1 "Grail"
.SH NAME
retofl \- convert a regular expression to a finite language
.SH SYNOPSIS
.B retofl re
.sp
.B retofl <re
.SH DESCRIPTION
.B
retofl
computes a finite language that accepts the same language as
\fIre\fR, and writes it on standard output.  
.LP
.B
retofl
returns 0 if the expression cannot be represented as a finite language.  Any
regular expression which includes a Kleene star term cannot be represented
as a finite language.  This rule does not apply to Kleene star expressions that
are equivalent to the empty string.
.LP
\fIre\fR must conform to the Grail format for regular expressions.
.SH EXAMPLES
.EX
% cat re1
{}

% retofl <re1

% cat re2
abc+""+def

% retofl <re2
abc

def

.EE
.SH AUTHORS
Roger Robson, Darrell Raymond and Derick Wood, the Grail project
.SH "SEE ALSO"
re(5), fl(5), fltore(1)
