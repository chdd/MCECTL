.de EX		
.if \\n(.$>1 .tm troff: tmac.an: \\*(.F: extra arguments ignored
.sp \\n()Pu
.ne 8v
.ie \\n(.$ .nr EX 0\\$1n
.el .nr EX 0.5i
.in +\\n(EXu
.nf
.CW
..
.de EE		
.if \\n(.$>0 .tm troff: tmac.an: \\*(.F: arguments ignored
.R
.fi
.in -\\n(EXu
.sp \\n()Pu
..
.TH fltore 1 "Grail"
.SH NAME
fltore \- convert a finite language to a regular expression
.SH SYNOPSIS
.B fltore fl
.sp
.B fltore <fl
.SH DESCRIPTION
.B
fltore
computes a regular expression that accepts the same language as
\fIfl\fR, and writes it on standard output.  
.lp
\fIfl\fR must conform to the Grail format for finite languages.
.LP
Empty languages will produce empty sets.  
.LP
The expression is generated by first creating a catenation of the symbols
in each word, and then generating plus expressions of the words.  The regular
expression is not generated as a trie.
.SH EXAMPLES
.EX
% cat fl1
abcf
abff
ab

cde

% fltore <fl1
abcf+abff+ab+""+cde

.EE
.SH AUTHORS
Roger Robson, Darrell Raymond and Derick Wood, the Grail project

.SH "SEE ALSO"
fl(5), re(5), retofl(1)
