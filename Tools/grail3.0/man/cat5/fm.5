


FM(5)              Headers, Tables, and Macros              FM(5)



NAME
     fm - format for finite-state machines

DESCRIPTION
     The standard description of a finite-state machine  (usually
     called a finite automaton) is as a 5-tuple:

     <{_s_t_a_t_e_s}, {_l_a_b_e_l_s}, _i_n_s_t_r_u_c_t_i_o_n-_r_e_l_a_t_i_o_n, _s_t_a_r_t-_s_t_a_t_e, {_f_i_n_a_l-_s_t_a_t_e_s}>

     In _G_r_a_i_l, however, a machine is specified simply by  listing
     its instructions.  Thus:

          1 a 3
          2 b 2
          3 b 3
          2 c 4
          (Reg.).fi

     is a list of instructions of the form <_s_o_u_r_c_e, _l_a_b_e_l, _t_a_r_g_e_t>.
     _G_r_a_i_l uses special _p_s_e_u_d_o-_i_n_s_t_r_u_c_t_i_o_n_s to indicate the
     start and final states.  Thus:

          (START) |- 0
          0 a 2
          (START) |- 1
          1 a 3
          2 b 2
          3 b 3
          2 c 4
          3 c 5
          4 d 4
          5 d 5
          4 -| (FINAL)
          5 -| (FINAL)
          (Reg.).fi

     is a complete description of a machine.

     In _G_r_a_i_l, all states are designated with positive integers, and all
     labels are single alphabetic characters.  The special
     pseudo-labels |- and -| are reserved for indicating the
     pseudo-instructions that designate that a given state is a start or
     final state.  The pseudo-labels may be thought of as `end markers' to be
     matched in the input stream.  The string (START) may
     appear only as a source state, and the string (FINAL) may
     appear only as a target state, and each must be accompanied by the
     appropriate psuedo-label (otherwise the specification of the machine
     is in error).

     _G_r_a_i_l permits multiple start states and multiple final states.
     A deterministic machine cannot have multiple start states.




SunOS 5.5              Last change: Grail                       1






FM(5)              Headers, Tables, and Macros              FM(5)



     The instructions in the machine need not be ordered.

     _G_r_a_i_l supports parameterizable machines.  If the alphabet
     of your machine is not the ASCII characters, then the instruction
     labels will be a textual represenatation of the objects that
     make up the alphabet.

AUTHORS
     Darrell Raymond and Derick Wood, the Grail project

SEE ALSO
     re(5)











































SunOS 5.5              Last change: Grail                       2



