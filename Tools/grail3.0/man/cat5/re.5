


RE(5)              Headers, Tables, and Macros              RE(5)



NAME
     re - format for regular expressions

DESCRIPTION
     _G_r_a_i_l's format for regular expressions is  very  similar  to
     the  conventional representation.  The following are regular
     expressions:

          {}        _e_m_p_t_y _s_e_t
          ""        _e_m_p_t_y _s_t_r_i_n_g
          a-b,A-Z        _a_n_y _s_i_n_g_l_e _l_e_t_t_e_r
          _x_y        _c_o_n_c_a_t_e_n_a_t_i_o_n _o_f _t_w_o _e_x_p_r_e_s_s_i_o_n_s
          _x + _y          _a_l_t_e_r_n_a_t_i_o_n _o_f _t_w_o _e_x_p_r_e_s_s_i_o_n_s
          _x*        _K_l_e_e_n_e _s_t_a_r
          (Reg.).fi


     Regular expressions can employ only the standard alphabetic characters;
     digits and special punctuation symbols are not permitted.

     _G_r_a_i_l follows the normal rules of precedence for regular
     expressions; Kleene star is highest, next is concatentation,
     and lowest is alternation.  Parentheses can be used to group
     subexpressions to override precedence.

     Internally, _G_r_a_i_l stores regular expressions as a kind of
     expression tree, and thus with minimum parenthesization.

     _G_r_a_i_l supports parameterizable regular expressions.  If
     the alphabet of your expressions is not the ASCII characters,
     then the symbols in the regular expression will be a textual
     representation of the objects in your alphabet.

AUTHORS
     Darrell Raymond and Derick Wood, the Grail project

SEE ALSO
     fm(5)

















SunOS 5.5              Last change: Grail                       1



