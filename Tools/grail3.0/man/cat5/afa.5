


AFA(5)                    FILE FORMATS                     AFA(5)



NAME
     afa - format for alternating finite-state machines

DESCRIPTION
     The standard description  of  an  alternating   finite-state
     machine (usually called an afa) is as a 5-tuple:

     <{_s_t_a_t_e_s}, {_l_a_b_e_l_s}, _h_e_a_d-_f_u_n_c_t_i_o_n, _t_r_a_n_s_i_t_i_o_n-_f_u_n_c_t_i_o_n, {_f_i_n_a_l-_s_t_a_t_e_s}>

     In _G_r_a_i_l, we have two representations for an afa. The  first
     one  is  called  literal representation. In this representa-
     tion, each Boolean function which is in  disjunctive  normal
     form is represented as a summation of literal Boolean terms.
     For example:

          ~q1q2~q3~q4+q1~q2~q3+q1q2q3~q4
          (Reg.).fi

     where qi is the ith Boolean variable, ~qi is the negation of the
     ith Boolean variable.

     Every AFA is represented as:

          symbols: _a_r_r_a_y _o_f _o_r_d_e_r_e_d _i_n_p_u_t _s_y_m_b_o_l_s
          states: _n_u_m_b_e_r _o_f _s_t_a_t_e _o_f _t_h_e _a_f_a
          finals: _l_i_s_t _o_f _f_i_n_a_l _s_t_a_t_e_s
          head: _l_i_t_e_r_a_l _r_e_p_r_e_s_e_n_t_a_t_i_o_n _o_f _t_h_e _h_e_a_d-_f_u_n_c_t_i_o_n
          _L_i_s_t _o_f _t_r_a_n_s_i_t_i_o_n _f_u_n_c_t_i_o_n_s (each line is a transition for a state
          at an input symbol)
          (Reg.).fi


     Notice that we always assume that the states of the AFA are numbered from 1
     to some number n, or 0 to indicate no states. Assume that the size of the
     input symbol array is m, and that the (i-1)*m + j line of the transition
     function list is the transition function of the ith state at the jth input
     symbol.

     Here is an example of a literal afa:

          symbols: [a,b]
          states: 7
          finals: q1 q2 q3 q5 q7
          head: q1~q5~q6q7
          q2~q3~q4+~q1~q2q3q4
          ~q1q2q3~q4
          q1q2q3~q4
          ~q2~q3q4+q2q3~q4+~q1q2q3q4
          ~q1q2~q3~q4+q1~q2~q3+q1q2q3~q4
          ~q1~q2~q3q4+~q1~q2q3~q4
          q1q2~q3~q4+~q1q2~q3q4
          ~q2~q3q4+~q1~q2q3~q4



Sun Release 4.1        Last change: Grail                       1






AFA(5)                    FILE FORMATS                     AFA(5)



          q5~q6q7
          q5~q6~q7
          0
          q5~q6
          q6~q7
          q5q6~q7
          (Reg.).fi


     The above literal representation of AFA is only for the purpose of getting
     a readable AFA for the user. For the actual operations, we use the bit-wise
     representation for AFA. In the bit-wise representation, we use a pair of
     integers to represent a term, and use a summation of pairs of integers to
     represent a Boolean expression which is in disjunctive normal form. For
     example, by using  bit-wise representation, the above literal AFA is
     represented as follows:

          symbols: [a,b]
          states:  7
          finals:  87
          head: 113 65
          14 2+15 12
          15 6
          15 7
          14 8+14 6+15 14
          15 2+7 1+15 7
          15 8+15 4
          15 3+15 10
          14 8+15 4
          112 80
          112 16
          0 16
          48 16
          96 32
          112 48
          (Reg.).fi


     Here we use the same assumptiosn as discussed for the literal
     representation of AFA.

     In _G_r_a_i_l, there is no start state and multiple final states
     are permitted for an AFA. The transition functions are ordered.

     _G_r_a_i_l supports parameterizable machines.  If the alphabet
     of your machine is not the ASCII characters, then the instruction
     labels will be a textual represenatation of the objects that
     make up the alphabet.

AUTHORS
     Xiuming Wu and Sheng Yu, the Grail project




Sun Release 4.1        Last change: Grail                       2






AFA(5)                    FILE FORMATS                     AFA(5)



SEE ALSO
     re(5)





















































Sun Release 4.1        Last change: Grail                       3



